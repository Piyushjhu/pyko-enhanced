# ===============================================================================
# pyKO CONFIGURATION FILE - HYBRID SPALL + INTERFACE SEPARATION
# ===============================================================================
# Material 1 flyer impacting Material 2 target: WITH interface separation capability
# 
# 📋 CONFIGURATION GUIDELINES:
# ===============================================================================
#
# 🎯 MESH SELECTION (cells, xstart, length):
# ----------------------------------------
# RULE: cells = thickness / target_resolution
# 
# RESOLUTION TARGETS:
#   • Shock physics:     2-5 μm/cell minimum
#   • Spall detection:   1-3 μm/cell (high resolution needed)
#   • Interface track:   2-4 μm/cell
#   • Computational:     5-10 μm/cell (faster, lower accuracy)
#
# EXAMPLES for 100 μm flyer:
#   Conservative: cells: 25  (4 μm/cell)  - Fast, adequate physics
#   Balanced:     cells: 50  (2 μm/cell)  - Good physics, reasonable speed
#   High-res:     cells: 100 (1 μm/cell)  - Excellent physics, slower
#
# POSITION SETUP:
#   xstart = -thickness (for flyer starting at negative position)
#   length = actual thickness of material
#   Example: 100 μm flyer → xstart: -0.0001, length: 0.0001
#
# ⏱️ TIMING SELECTION (tstop, dtstart, dtoutput):
# ---------------------------------------------
# tstop:    Total simulation time (typically 0.2-4.0 μs for impact)
# dtstart:  Initial time step (start small: 0.0001-0.001 μs)
# dtoutput: Output frequency (0.0001-0.001 μs for good resolution)
#
# RULE: dtoutput determines plot resolution
#   Fine plots: dtoutput = 0.0001 μs (10,000 fps)
#   Normal:     dtoutput = 0.001 μs  (1,000 fps)
#
# 💥 IMPACT VELOCITY (up0):
# ------------------------
# Typical ranges:
#   Low velocity:  100-500 m/s   (quasi-static compression)
#   Medium:        500-2000 m/s  (shock formation)
#   High:          2000+ m/s     (strong shock, spall likely)
#   Hypervelocity: 5000+ m/s     (extreme conditions)
#
# 🔨 SPALL PARAMETERS (pfrac, nrhomin):
# ------------------------------------
# pfrac:   Fracture stress threshold
#   Al:    ~200-500 MPa (2E8 - 5E8 Pa)
#   Cu:    ~800-1200 MPa (8E8 - 1.2E9 Pa)
#   Steel: ~1000-2000 MPa (1E9 - 2E9 Pa)
#   No spall: 1E20 Pa (effectively infinite)
#
# nrhomin: Maximum density reduction before fracture
#   0.9:   Allow 10% density reduction (moderate ductility)
#   0.8:   Allow 20% density reduction (ductile)
#   1.0:   No density reduction allowed (perfectly brittle)
#
# 💡 PERFORMANCE TIPS:
# ------------------
# • Total cells = sum of all material cells
# • Computational cost ∝ (total cells)² × (simulation time / time step)
# • Start with coarse mesh, refine if needed
# • Typical total: 100-500 cells for most problems
#
# ===============================================================================
# 
# 🚨 CRITICAL YAML FORMATTING:
# ===>>>> Exponential numbers: put a zero after the decimal point and before the e or E <<<<===
# yaml does not always process exponential notation as a number and can mistakenly load as a string
# check your input parameters, especially if using mixed units:
#       import pyko
#       import eos_table as etab      <<-- needed if using SESAME tables
#       run = RunClass()
#       run.checkinput('filename')
#
# ===============================================================================
#
# --------------------------------------------------------------------
# I/O PARAMETERS
#
# problem name; output file name; output file format 'BIN' or 'ASC'
name           : 'Test 17 Al-Cu WITH Interface Separation'
outputfilename : './test17-spall-interface/pyko-test17-with-interface-separation-bin.dat'
outputformat   : 'BIN'
#
# Timing Parameters:
# tstop = Total simulation run time (4.0 μs = 4.0 × 10⁻⁶ seconds)
#         Extended time for complete shock transit, reflection, and spall evolution
# dtstart = Initial time step (0.0001 μs = 0.1 nanoseconds)
#           Overrides automatic calculation for stable startup
# dtoutput = Output snapshot frequency (0.001 μs = 1 nanosecond)
#            Saves 4000 snapshots over simulation duration (4.0/0.001 = 4000)
tstop      : 0.200E-6
dtstart    : 0.0001E-6
dtoutput   : 0.0001E-6
#
# --------------------------------------------------------------------
# MATERIAL PROPERTIES AND GRIDDING PARAMETERS
#
# Material 1: Aluminum flyer (with spall capability)
mat1:
    mesh:
        cells  : 100          
        xstart : -0.0001
        length :  0.0001    # 100 μm = 0.0001 m
    init:
        up0    : 800.0  # Impact velocity
        rho0   : 2700.0
        p0     : 0.0
        e0     : 0.0
        t0     : 298.0
    eos: 
        name   : 'Al flyer'
        type   : 'MGR'
        rhoref : 2700.0
        c0     : 5200.0
        s1     : 1.5
        gamma0 : 2.0
        cv     : 896.0
    str:
        type   : 'VM'        # Von Mises for spall capability
        gmod   : 26.0E9
        ys     : 207.0E6
    frac:
        # Fracture Parameters:
        pfrac  : 276.0E6     # Spall threshold: 276 MPa tensile stress limit
        nrhomin : 0.9        # Max distension: allows 10% density reduction (ρ_min/ρ_ref = 0.9)
                             # Material fractures when density drops below 90% of original
#
# Material 2: Copper target (with spall capability)
mat2:
    mesh:
        cells  : 200
        xstart : 0.0
        length : 0.0002
    init:
        up0    : 0.0
        rho0   : 8930.0
        p0     : 0.0
        e0     : 0.0
        t0     : 298.0
    eos:
        name   : 'Cu target'
        type   : 'MGR'
        rhoref : 8930.0
        c0     : 3900.0
        s1     : 1.49
        gamma0 : 1.99
        cv     : 385.0
    str:
        type   : 'VM'        # Von Mises for spall capability
        gmod   : 46.0E9      # Copper shear modulus
        ys     : 95.6E6      # Copper yield strength
    frac:
        # Fracture Parameters:
        pfrac  : 3E9       # Spall threshold  
        nrhomin : 1          # Max distension: NO density reduction allowed (ρ_min/ρ_ref = 1.0)
                             # Perfectly brittle - fractures immediately upon any expansion
#
#
# --------------------------------------------------------------------
# DOMAIN PARAMETERS
#
# 'FIXED' or 'FREE'
# ibc = inner boundary condition (at minimum x); obc = outer boundary condition (at maximum x)
boundaries: 
    ibc    : 'FREE'
    ip0    : 0.0
    obc    : 'FREE'
    op0    : 0.0
#
# 'PLA' = planar; 'CYL' = cylindrical; 'SPH' = spherical
geometry   : 'PLA'
#
# gravitational acceleration; negative means force toward negative position x
gravity    : 0.0
#
# void pressure
pvoid : 0.0
#
# --------------------------------------------------------------------
# UNITS
#
# user input parameters units
# Provide the units for the user configuration parameters.
# This feature is provided for user convenience and allows for entering material parameters in more natural mixed units.
# The user parameter values will be converted to self-consistent code units during input processing.
# Output file units will be the same as the input units and included in the binary pickle files using the pint package.
# mesh definition units must be the same.
# s2 is the quadratic term for the Mie Grueneisen EOS
# here mks because life is easier in consistent units
units:
    time        : 'second'
    length      : 'meter'
    velocity    : 'meter/second'
    density     : 'kg/m^3'
    mass        : 'kg'
    pressure    : 'Pa'
    temperature : 'K'
    energy      : 'J'
    sp_energy   : 'J/kg'
    sp_entropy  : 'J/kg/K'
    sp_heat_cap : 'J/kg/K'
    gravity     : 'm/s^2'
    s2          : 'second/meter'
#
# EOS table units
# These are the units for the Stewart Group ANEOS tables.
# The table units will be converted to code units during input processing.
tableunits:
    # in NEW-SESAME-STD.TXT
    density      : 'g/cm^3'
    temperature  : 'K'
    pressure     : 'GPa'
    sp_energy    : 'MJ/kg'
    hfree_energy : 'MJ/kg'
    # in NEW-SESAME-EXT.TXT (also includes a phase identification flag)
    sp_entropy   : 'MJ/K/kg'
    sound_speed  : 'cm/s'
    sp_heat_cap  : 'MJ/kg/K'
#
# code units
# The routine that sets up the master run class object converts all inputs into code units,
# including converting any EOS table units to code units.
# These are the default set of code units for the original KO code.
# Energy: 1 eu = 10^12 ergs
# Pressure: 10^12 dynes/cm^2 = 100 kJ = 1 megabar     -> P=E/V : dynes/cm^2 = erg/cm^3
# Internal energy per original volume = 10^12 ergs/cm^3 = eu/cm^3 = 100 GJ/m^3
# Heat capacity per original volume = 10^12 ergs/cm^3/K = eu/cm^3/K = 100 GJ/m^3/K
# Velocity = cm/microseconds = 10 km/s
# Note that these units need to be declared with a coefficient of 1 (no scaling factor)
# Scaling factors are declared using the pint define command within function readinput_yaml:
#     ureg.define('eu = 1.0E12 ergs')   # energy unit
codeunits:
    time            : 'microseconds'
    length          : 'cm'
    mass            : 'g'
    density         : 'g/cm^3'
    relative_volume : 'dimensionless' 
    velocity        : 'cm/microsecond'
    pressure        : 'megabar'
    temperature     : 'K'
    energy          : 'eu'
    sp_energy       : 'eu/g'
    sp_heat_cap     : 'eu/K/g'
    sp_entropy      : 'eu/K/g'
    ie_perv0        : 'eu/cm^3'
    cv_perv0        : 'eu/cm^3/K'
    gravity         : 'cm/microseconds^2'
    s2              : 'microseconds/cm'
# It is possible to change the code units to a different self-consistent set of units.
# The code units presented here set up the initialization routine for the problem domain.
# Changing to a different set of units should work but has not been tested yet.
# Do not make modifications to the central code routines 
# that make the code dependent on a specific set of units.
# --------------------------------------------------------------------
#
# =========================
# end of configuration file
# =========================
